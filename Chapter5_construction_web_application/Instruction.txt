СОЗДАЕМ СЕРВЕРНЫЕ ВЕБ ПРИЛОЖЕНИЯ С ПОМОЩЬЮ ФРЕЙМВОРКА FLASK

1. Устанавливаем с сайта PyPi.org фреймворк Flask через командную строку
        py -3 -m pip install Flask
       увидим результат установки
       Successfully installed Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 flask-2.2.2 itsdangerous-2.1.2
2. Проверяем готовность Flask для этого создаем текстовый файл hello_flask.py со следующим содержимым:

from flask import Flask

app = Flask(_name_)

@app.route('/')
def hello() -> str:
    return 'Hello world from Flask!'

app.run()

3. Запускаем файл hello_flask.py
получаем

 * Running on http://127.0.0.1:5000
Press CTRL+C to quit

означает готовность веб-сервер Flask запущен и готов к обслуживанию запросов, поступающих на веб адрес 127.0.0.1 в порт протокола 5000

В веббраузере набираем в адресной строке localhost:5000 и видим Hello world from Flask!
в командной строке откуда запускали файл видим сообщение
127.0.0.1 - - [16/Nov/2022 00:37:40] "GET / HTTP/1.1" 200

4. Создадим html-шаблоны для ввода данных в браузере (entry.html), получения ответных данных (results.html) и базового шаблона
(base.html) у которого будут наследовать оформление другие веб html-странички

5. Функция render_template принимает имя шаблона со всеми аргументами и возвращает строку с разметкой HTML
ИМПОРТИРУЕМ её из модуля flask
        from flask import render_template


6. Создадим новый URL '/entry'

7. Создадим новую декорированную функцию
    @app.route('/entry')
    def entry_page() -> 'html':
        return render_template('entry.html', the_title = 'Welcome to search4letters on the web!')

    здесь entry.html имя шаблона для отображения, а 'Welcome to search4letters on the web!' - значение аргумента 'the_title'

8. C учётом пунктов 6,7 изменим код файла hello_flask.py и поменяем его название на vsearch4web.py
9. Внутри каталога с файлом приложения создадим папку static, в которую поместим файл hf.css (c описанием таблицы стилей)
и папку templates в которой должны находиться все шаблоны html используемые в нашем web приложении, а также переименуем
файл с приложением в search4web.py
10. После запуска приложения поймали ошибку Method Not Allowed это потому что при обработке декоратора URL /search4 по
 умолчанию применяется метод обработки HTTP запроса GET, вместе с тем в HTTP запросе entry.html используется метод POST
 <form method='POST' action='/search4'> # строка из файла energy.html
 в аргументе декоратора @app.route('/search4', methods = 'POST')  добавляем метод пост как аргумент

11. Чтобы каждый раз не приходилось перезапускать и проверять програму можно перейти в режим отладки, для этого меняем
последнюю строку на
app.run(debug=True)

 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 470-396-852  # теперь после каждого изменения файл будет перезапускаться самостоятельно

12. Но теперь какую бы фразу в форме entry мы не вводили возвращается один и тот же ответ - потому что в аргументе функции
search4letters жёстко задан аргумент со значением 'life, the universe, and everything!'

13. Для того, чтобы открыть доступ к переданным объектам есть объект request содержащий атрибут-cловарь form с данным HTML-формы,
отправленной браузером, чтобы прочитать данные формы необходимо поместить имя элемента в квадратные скобки

<tr><td>Phrase:</td><td><input name='phrase' type='TEXT' width='60'></td></tr>
                        request.form['phrase']

для этого импортируем request
from flask import request
''' в декорированной функции do_search сделаем возможность ввода данных в форму
удалив жестко заданные строки'''
    phrase = request.form['phrase']
    letters = request.form['letters']
    result_set = search4letters(phrase, letters)

14. Изменим текст функции do_search, чтобы она возвращала не строку, а html страницу в которую возвращались бы следующие
данные:
название таблички, результат выполнения функции поиска, фразу, в которой мы искали буквы, буквы, которые мы искали в фразе.
Всё это реализуем через функцию render_template

render_template('results.html', the_phrase = phrase, the_letters = letters, the_title = title, the_results = result_str)

15. Для завершения написания web-приложения сделаем так, чтоб декоратор @app.route('/') перенаправлял нас на страницу
(/entry), для этого импортируем метод redirect, встроенный в Flask

16. Можно к одной функции привязать несколько URL без функции redirect. Удалим её из импортируемых файлов
@app.route('/') поместим в коде перед @app.route('/entry') теперь обработка производится в одном запросе, а не в двух,
как при перенаправлении.

17. Решение вопроса, чтобы наша программа могла запускаться глобально, например с использованием облака
PythonAneWhere. Для этого строчку app.run обернём условием if __name__=="__main__":
    app.run(debug=True)
    теперь при выполнении программы локально - имя будет __main__ и программа будет запускаться с нашего компьютера
    а в том случае если наша программа будет импортирована в облако или куда еще либо имя будет отлично от __main__
    и код app.run будет добавляться уже облаком.
18. Добавили функцию, позволяющую документировать вводимые на поиск запросы и получаемые результаты, результаты записываем
в файл vsearch.log

def log_request(req: 'flask_request', res: str) -> None:
    with open('vsearch.log', 'a', encoding='utf-8') as data:
        print(req, res, file=data)

в качестве аргументов принимаем запрос и результат поиска и эти данные добавляются в конец файла 'vsearch.log'

19. Далее добавим еще один URL адрес '/viewlog', который позволит выводить в окно браузера данные из журнала документирования
результатоа поиска, для этого создадим декорированную функцию
@app.route('/viewlog')
def view_log() -> str:
    with open('vsearch.log') as log:  # открываем для чтения файл 'vsearch.log' считывание проведем сразу целиком
        contents=log.read()           # считывание файла целиком методом read() и запись в переменную contents
    return contents  # возвращение в окно браузера содержимого файла

20. В итоге у нас отображаются только результаты запросов, без указания фраз, в которых искали буквы.
Для решения проблемы в браузере отобразим исходный код страницы. Для Яндекса: параметры(правый верхний угол) -> Дополнительно ->
Дополнительные параметры -> Показать исходный код страницы

<Request 'http://localhost:5000/search4' [POST]> eo
<Request 'http://localhost:5000/search4' [POST]> oeiau
<Request 'http://localhost:5000/search4' [POST]> uae
как видим, информация о самих запросах имеется, но браузер вводят в заблуждение <Request , так как он воспринимает
как тэг html документа, при этом такого тэга нет.
Его необходимо экранировать.
Для этого есть метод escape, который экранирует такие символы, как <  (&lr)   >   (&gr)
Импортируем escape из flask
Применяем его к переменной contents, которая единой строкой считывает файл
from flask import escape
contents=escape(log.read())
----------------результат отображения в браузере-----------------------
&lt;Request &#39;http://localhost:5000/search4&#39; [POST]&gt; eo
&lt;Request &#39;http://localhost:5000/search4&#39; [POST]&gt; oeiau
&lt;Request &#39;http://localhost:5000/search4&#39; [POST]&gt; uae

21. Теперь модернизируем функцию вывода данных в браузер
def log_request(req: 'flask_request', res: str) -> None:
    with open('vsearch.log', 'a', encoding='utf-8') as data:
        print(req, res, file=data)    # вместо req меняем на str(dir(req))  , позволяющий вывести данные директории

после перезапуска программы и удаления предыдущего файла документирования увидим в браузере
['__annotations__', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_cached_json', '_get_file_stream', '_get_stream_for_parsing', '_load_form_data', '_parse_content_type', '_parsed_content_type', 'accept_charsets', 'accept_encodings', 'accept_languages', 'accept_mimetypes', 'access_control_request_headers', 'access_control_request_method', 'access_route', 'application', 'args', 'authorization', 'base_url', 'blueprint', 'blueprints', 'cache_control', 'charset', 'close', 'content_encoding', 'content_length', 'content_md5', 'content_type', 'cookies', 'data', 'date', 'dict_storage_class', 'encoding_errors', 'endpoint', 'environ', 'files', 'form', 'form_data_parser_class', 'from_values', 'full_path', 'get_data', 'get_json', 'headers', 'host', 'host_url', 'if_match', 'if_modified_since', 'if_none_match', 'if_range', 'if_unmodified_since', 'input_stream', 'is_json', 'is_multiprocess', 'is_multithread', 'is_run_once', 'is_secure', 'json', 'json_module', 'list_storage_class', 'make_form_data_parser', 'max_content_length', 'max_form_memory_size', 'max_forwards', 'method', 'mimetype', 'mimetype_params', 'on_json_loading_failed', 'origin', 'parameter_storage_class', 'path', 'pragma', 'query_string', 'range', 'referrer', 'remote_addr', 'remote_user', 'root_path', 'root_url', 'routing_exception', 'scheme', 'script_root', 'server', 'shallow', 'stream', 'trusted_hosts', 'url', 'url_charset', 'url_root', 'url_rule', 'user_agent', 'user_agent_class', 'values', 'view_args', 'want_form_data_parsed'] eo
из множества атрибутов нам будут нужны только 3:
    req.form - данные из html-формы веб приложения
    req.remote_addr - IP-адрес веб-браузера, приславшего форму
    req.user_agent - строка, идентифицирующая браузер пользователя
тепень отредактируем функцию log_request , чтобы она сохраняла эти три параметра и результата вызова search4letters

def log_request(req: 'flask_request', res: str) -> None:
    with open('vsearch.log', 'a', encoding='utf-8') as data:
        print(req.form, file=data, end='|')
        print(req.remote_addr, file=data, end='|')
        print(req.user_agent, file=data, end='|')
        print(res, file=data)

-------так будет выглядеть результат журналирования по каждому запросу
ImmutableMultiDict([('phrase', 'hello world'), ('letters', 'aeiou')])|127.0.0.1|Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 YaBrowser/22.11.0.2419 Yowser/2.5 Safari/537.36|oe

21. Заменим четыре строчки вывода в консоль одной и укажем вместо end - '|', sep='|'
