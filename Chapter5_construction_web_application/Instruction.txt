СОЗДАЕМ СЕРВЕРНЫЕ ВЕБ ПРИЛОЖЕНИЯ С ПОМОЩЬЮ ФРЕЙМВОРКА FLASK

1. Устанавливаем с сайта PyPi.org фреймворк Flask через командную строку
        py -3 -m pip install Flask
       увидим результат установки
       Successfully installed Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 flask-2.2.2 itsdangerous-2.1.2
2. Проверяем готовность Flask для этого создаем текстовый файл hello_flask.py со следующим содержимым:

from flask import Flask

app = Flask(_name_)

@app.route('/')
def hello() -> str:
    return 'Hello world from Flask!'

app.run()

3. Запускаем файл hello_flask.py
получаем

 * Running on http://127.0.0.1:5000
Press CTRL+C to quit

означает готовность веб-сервер Flask запущен и готов к обслуживанию запросов, поступающих на веб адрес 127.0.0.1 в порт протокола 5000

В веббраузере набираем в адресной строке localhost:5000 и видим Hello world from Flask!
в командной строке откуда запускали файл видим сообщение
127.0.0.1 - - [16/Nov/2022 00:37:40] "GET / HTTP/1.1" 200

4. Создадим html-шаблоны для ввода данных в браузере (entry.html), получения ответных данных (results.html) и базового шаблона
(base.html) у которого будут наследовать оформление другие веб html-странички

5. Функция render_template принимает имя шаблона со всеми аргументами и возвращает строку с разметкой HTML
ИМПОРТИРУЕМ её из модуля flask
        from flask import render_template


6. Создадим новый URL '/entry'

7. Создадим новую декорированную функцию
    @app.route('/entry')
    def entry_page() -> 'html':
        return render_template('entry.html', the_title = 'Welcome to search4letters on the web!')

    здесь entry.html имя шаблона для отображения, а 'Welcome to search4letters on the web!' - значение аргумента 'the_title'

8. C учётом пунктов 6,7 изменим код файла hello_flask.py и поменяем его название на vsearch4web.py
9. Внутри каталога с файлом приложения создадим папку static, в которую поместим файл hf.css (c описанием таблицы стилей)
и папку templates в которой должны находиться все шаблоны html используемые в нашем web приложении, а также переименуем
файл с приложением в search4web.py
10. После запуска приложения поймали ошибку Method Not Allowed это потому что при обработке декоратора URL /search4 по
 умолчанию применяется метод обработки HTTP запроса GET, вместе с тем в HTTP запросе entry.html используется метод POST
 <form method='POST' action='/search4'> # строка из файла energy.html
 в аргументе декоратора @app.route('/search4', methods = 'POST')  добавляем метод пост как аргумент

11. Чтобы каждый раз не приходилось перезапускать и проверять програму можно перейти в режим отладки, для этого меняем
последнюю строку на
app.run(debug=True)

 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 470-396-852  # теперь после каждого изменения файл будет перезапускаться самостоятельно

12. Но теперь какую бы фразу в форме entry мы не вводили возвращается один и тот же ответ - потому что в аргументе функции
search4letters жёстко задан аргумент со значением 'life, the universe, and everything!'

13. Для того, чтобы открыть доступ к переданным объектам есть объект request содержащий атрибут-cловарь form с данным HTML-формы,
отправленной браузером, чтобы прочитать данные формы необходимо поместить имя элемента в квадратные скобки

<tr><td>Phrase:</td><td><input name='phrase' type='TEXT' width='60'></td></tr>
                        request.form['phrase']

для этого импортируем request
from flask import request
''' в декорированной функции do_search сделаем возможность ввода данных в форму
удалив жестко заданные строки'''
    phrase = request.form['phrase']
    letters = request.form['letters']
    result_set = search4letters(phrase, letters)