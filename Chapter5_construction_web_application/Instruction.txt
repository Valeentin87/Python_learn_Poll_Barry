СОЗДАЕМ СЕРВЕРНЫЕ ВЕБ ПРИЛОЖЕНИЯ С ПОМОЩЬЮ ФРЕЙМВОРКА FLASK

1. Устанавливаем с сайта PyPi.org фреймворк Flask через командную строку
        py -3 -m pip install Flask
       увидим результат установки
       Successfully installed Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 flask-2.2.2 itsdangerous-2.1.2
2. Проверяем готовность Flask для этого создаем текстовый файл hello_flask.py со следующим содержимым:

from flask import Flask

app = Flask(_name_)

@app.route('/')
def hello() -> str:
    return 'Hello world from Flask!'

app.run()

3. Запускаем файл hello_flask.py
получаем

 * Running on http://127.0.0.1:5000
Press CTRL+C to quit

означает готовность веб-сервер Flask запущен и готов к обслуживанию запросов, поступающих на веб адрес 127.0.0.1 в порт протокола 5000

В веббраузере набираем в адресной строке localhost:5000 и видим Hello world from Flask!
в командной строке откуда запускали файл видим сообщение
127.0.0.1 - - [16/Nov/2022 00:37:40] "GET / HTTP/1.1" 200

4. Создадим html-шаблоны для ввода данных в браузере (entry.html), получения ответных данных (results.html) и базового шаблона
(base.html) у которого будут наследовать оформление другие веб html-странички

5. Функция render_template принимает имя шаблона со всеми аргументами и возвращает строку с разметкой HTML
ИМПОРТИРУЕМ её из модуля flask
        from flask import render_template


6. Создадим новый URL '/entry'

7. Создадим новую декорированную функцию
    @app.route('/entry')
    def entry_page() -> 'html':
        return render_template('entry.html', the_title = 'Welcome to search4letters on the web!')

    здесь entry.html имя шаблона для отображения, а 'Welcome to search4letters on the web!' - значение аргумента 'the_title'